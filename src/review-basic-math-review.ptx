<?xml version="1.0" encoding="UTF-8"?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section xml:id="review-basic-math-review">
  <title>Basic Math Chapter Review</title>
  <subsection>
    <title>Arithmetic with Negative Numbers</title>
    <paragraphs>
      <title>Adding Real Numbers with the Same Sign</title>
      <p>
        When adding two numbers with the same sign,
        we can ignore the signs and simply add the numbers as if they were both positive.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="2">
          <li>
            <p>
              <m>5+2=7</m>
            </p>
          </li>
          <li>
            <p>
              <m>-5+(-2)=-7</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
    <paragraphs>
      <title>Adding Real Numbers with Opposite Signs</title>
      <p>
        When adding two numbers with opposite signs,
        we find those two numbers' difference.
        The sum has the same sign as the number with the bigger value.
        If those two numbers have the same value, the sum is <m>0</m>.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="2">
          <li>
            <p>
              <m>5+(-2)=3</m>
            </p>
          </li>
          <li>
            <p>
              <m>(-5)+2=-3</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
    <paragraphs>
      <title>Subtracting a Positive Number</title>
      <p>
        When subtracting a positive number,
        we can change the problem to adding the <em>opposite</em>
        number and then apply the methods of adding numbers.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="3">
          <li>
            <p>
              <m>\begin{aligned}[t] 5-2\amp=5+(-2)\\ \amp=3 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] 2-5\amp=2+(-5)\\ \amp=-3 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] -5-2\amp=-5+(-2)\\ \amp=3 \end{aligned}</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
    <paragraphs>
      <title>Subtracting a Negative Number</title>
      <p>
        When subtracting a negative number,
        we can change those two negative signs to a positive sign and then apply the methods of adding numbers.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="3">
          <li>
            <p>
              <m>\begin{aligned}[t] 5-(-2)\amp=5+2\\ \amp=7 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] -5-(-2)\amp=-5+2\\ \amp=-3 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] -2-(-5)\amp=-2+5\\ \amp=3 \end{aligned}</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
    <paragraphs>
      <title>Multiplication and Division of Real Numbers</title>
      <p>
        When multiplying and dividing real numbers,
        each pair of negative signs cancel out each other
        (becoming a positive sign).
        If there is still one negative sign left, the result is negative;
        otherwise the result is positive.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="3">
          <li>
            <p>
              <m>(6)(-2)=-12</m>
            </p>
          </li>
          <li>
            <p>
              <m>(-6)(2)=-12</m>
            </p>
          </li>
          <li>
            <p>
              <m>(-6)(-2)=12</m>
            </p>
          </li>
          <li>
            <p>
              <m>(-6)(-2)(-1)=-12</m>
            </p>
          </li>
          <li>
            <p>
              <m>(-6)(-2)(-1)(-1)=12</m>
            </p>
          </li>
          <li>
            <p>
              <m>\frac{12}{-2}=-6</m>
            </p>
          </li>
          <li>
            <p>
              <m>\frac{-12}{2}=-6</m>
            </p>
          </li>
          <li>
            <p>
              <m>\frac{-12}{-2}=6</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
    <paragraphs>
      <title>Powers</title>
      <p>
        When we raise a negative number to a certain power,
        apply the rules of multiplying real numbers:
        each pair of negative signs cancel out each other.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="2">
          <li>
            <p>
              <m>\begin{aligned}[t] (-2)^2\amp=(-2)(-2)\\ \amp=4 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] (-2)^3\amp=(-2)(-2)(-2)\\ \amp=-8 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] (-2)^4\amp=(-2)(-2)(-2)(-2)\\ \amp=16 \end{aligned}</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
    <paragraphs>
      <title>Difference between <m>(-a)^n</m> and <m>-a^n</m></title>
      <p>
        For the exponent expression <m>2^3</m>,
        the number <m>2</m> is called the <term>base</term>
        and the number <m>3</m> is called the <term>exponent</term>.
            <idx><h>exponent</h></idx>
        The base of <m>(-a)^n</m> is <m>-a</m>,
        while the base of <m>-a^n</m> is <m>a</m>.
        This makes a difference in the result when the power is an even number.
      </p>
    </paragraphs>
    <example>
      <p>
        <ol label="a." cols="2">
          <li>
            <p>
              <m>\begin{aligned}[t] (-4)^2\amp=(-4)(-4)\\ \amp=16 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] -4^2\amp=-(4)(4)\\ \amp=-16 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] (-4)^3\amp=(-4)(-4)(-4)\\ \amp=-64 \end{aligned}</m>
            </p>
          </li>
          <li>
            <p>
              <m>\begin{aligned}[t] -4^3\amp=-(4)(4)(4)\\ \amp=-64 \end{aligned}</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
  </subsection>
  <subsection>
    <title>Fraction Arithmetic</title>
    <example>
      <title>Multiplying Fractions</title>
      <sidebyside widths="65% 29%" margins="0%">
        <p>
          When multiplying two fractions,
          we simply multiply the numerators and denominators.
          To avoid big numbers, we should reduce fractions before multiplying.
          If one number is an integer,
          we can write it as a fraction with a denominator of <m>1</m>.
          For example, <m>2=\frac{2}{1}</m>.
        </p>
        <p>
          <md>
            <mrow>\frac{1}{2}\cdot\frac{3}{4}\amp=\frac{1\cdot3}{2\cdot4}</mrow>
            <mrow>\amp=\frac{3}{8}</mrow>
          </md>
        </p>
      </sidebyside>
    </example>
    <example>
      <title>Dividing Fractions</title>
      <sidebyside widths="60% 34%" margins="0%">
        <p>
          When dividing two fractions, we
          <q>flip</q>
          the second number and then do multiplication.
        </p>
        <p>
          <md>
            <mrow>\frac{1}{2}\div\frac{4}{3}\amp=\frac{1}{2}\cdot\frac{3}{4}</mrow>
            <mrow>\amp=\frac{3}{8}</mrow>
          </md>
        </p>
      </sidebyside>
    </example>
    <example>
      <title>Adding/Subtracting Fractions</title>
      <sidebyside widths="65% 29%" margins="0%">
        <p>
          Before adding/subtracting fractions,
          we need to change each fraction's denominator to the same number,
          called the <term>common denominator</term>.
          Then, we add/subtract the numerators,
          and the denominator remains the same.
        </p>
        <p>
          <md>
            <mrow>\frac{1}{2}-\frac{1}{3}\amp=\frac{1}{2}\multiplyright{\frac{3}{3}}-\frac{1}{3}\multiplyright{\frac{2}{2}}</mrow>
            <mrow>\amp=\frac{3}{6}-\frac{2}{6}</mrow>
            <mrow>\amp=\frac{1}{6}</mrow>
          </md>
        </p>
      </sidebyside>
    </example>
  </subsection>
  <subsection>
    <title>Unit Analysis</title>
    <idx><h>unit analysis</h></idx>
    <p>
      Unit analysis is a particular process that uses unit ratios to convert units.
      You may refer to <xref ref="appendix-unit-conversions"/>
      to find unit conversion facts needed to do these conversions.
    </p>
    <example>
      <title>Using Multiple Unit Ratios</title>
      <p>
        How many grams are in <m>5</m> pounds?
        <md>
          <mrow>5\,\text{lb}\amp=\frac{5\,\text{lb}}{1}\amp\amp\text{Rewrite as a ratio.}</mrow>
          <mrow>\amp=\frac{5\,\text{lb}}{1}\cdot\frac{1\,\text{kg}}{2.205\,\text{lb}}\cdot\frac{1000\,\text{g}}{1\,\text{kg}}\amp\amp\text{Two unit ratios are needed.}</mrow>
          <mrow>\amp=\frac{5\,\firstcancel{\text{lb}}}{1}\cdot\frac{1\,\secondcancel{\text{kg}}}{2.205\,\firstcancel{\text{lb}}}\cdot\frac{1000\,\text{g}}{1\,\secondcancel{\text{kg}}}\amp\amp\text{Units may now cancel.}</mrow>
          <mrow>\amp=\frac{5}{1}\cdot\frac{1}{2.205}\cdot\frac{1000\,\text{g}}{1}\amp\amp\text{Only units of g remain.}</mrow>
          <mrow>\amp=\frac{5\cdot1000}{2.205}\,\text{g}\amp\amp\text{Multiply what's left and then divide.}</mrow>
          <mrow>\amp\approx2268\,\text{g}</mrow>
        </md>
      </p>
      <p>
        So <m>5</m> pounds is about <m>2268</m> grams.
      </p>
    </example>
    <example>
      <title>Converting Squared or Cubed Units</title>
      <p>
        Convert <m>240</m> square inches into square centimeters.
        <md>
          <mrow>240\,\text{in}^2\amp=\frac{240\,\text{in}^2}{1}\amp\amp\text{Rewrite as a ratio.}</mrow>
          <mrow>\amp=\frac{240\,\text{in}^2}{1}\cdot\left(\frac{2.54\,\text{cm}}{1\,\text{in}}\right)^2\amp\amp\text{The unit ratio needs to be squared.}</mrow>
          <mrow>\amp=\frac{240\,\text{in}^2}{1}\cdot\frac{2.54^2\,\text{cm}^2}{1\,\text{in}^2}\amp\amp\text{Everything inside the parentheses is squared.}</mrow>
          <mrow>\amp=\frac{240\,\cancel{\text{in}^2}}{1}\cdot\frac{2.54^2\,\text{cm}^2}{1\,\cancel{\text{in}^2}}\amp\amp\text{Units may now cancel.}</mrow>
          <mrow>\amp=\frac{240}{1}\cdot\frac{2.54^2\,\text{cm}^2}{1}\amp\amp\text{Only units of sq cm remain.}</mrow>
          <mrow>\amp=240\cdot2.54^2\,\text{cm}^2\amp\amp\text{Multiply.}</mrow>
          <mrow>\amp\approx1548\,\text{cm}^2</mrow>
        </md>
      </p>
      <p>
        So <m>240</m> square inches is approximately <m>1548</m> square centimeters.
      </p>
    </example>
    <example>
      <title>Converting Rates</title>
      <p>
        Gold has a density of
        <quantity>
          <mag>19.3</mag><unit base="gram"/><per prefix="milli" base="liter"/>
        </quantity>.
        What is this density in ounces per cubic inch?
        <md>
          <mrow>19.3\,\frac{\text{g}}{\text{mL}}\amp=\frac{19.3\,\text{g}}{1\,\text{mL}}\amp\amp\text{Write the rate as a ratio.}</mrow>
          <mrow>\amp\approx\frac{19.3\,\text{g}}{1\,\text{mL}}\cdot\frac{16.39\,\text{mL}}{1\,\text{in}^3}\cdot\frac{1\,\text{oz}}{28.35\,\text{g}}\amp\amp\text{Use unit ratios to make cancellations.}</mrow>
          <mrow>\amp=\frac{19.3\,\firstcancel{\text{g}}}{1\,\secondcancel{\text{mL}}}\cdot\frac{16.39\,\secondcancel{\text{mL}}}{1\,\text{in}^3}\cdot\frac{1\,\text{oz}}{28.35\,\firstcancel{\text{g}}}\amp\amp\text{Units may now cancel.}</mrow>
          <mrow>\amp=\frac{19.3}{1}\cdot\frac{16.39}{1\,\text{in}^3}\cdot\frac{1\,\text{oz}}{28.35}\amp\amp\text{Only oz per cubic inch remain.}</mrow>
          <mrow>\amp=\frac{19.3\cdot16.39}{28.35}\,\frac{\text{oz}}{\text{in}^3}\amp\amp\text{Multiply what's left and then divide.}</mrow>
          <mrow>\amp\approx11.16\,\frac{\text{oz}}{\text{in}^3}</mrow>
        </md>
        Notice that we did not need to raise any unit ratios to a power since there is a conversion fact that tells us that <m>1\,\text{in}^3\approx16.39\,\text{mL}</m>.
      </p>
      <p>
        Thus, the density of gold is about
        <quantity>
          <mag>11.16</mag><unit base="ounce"/><per base="inch" exp="3"/>
        </quantity>.
      </p>
    </example>
  </subsection>
  <subsection>
    <title>Absolute Value and Square Root</title>
    <idx><h>absolute value</h><h>of a real number</h></idx>
    <idx><h>square root</h><h>of a real number</h></idx>
    <example>
      <title>Absolute Value</title>
      <sidebyside widths="47% 47%" margins="0%" valign="top">
        <p>
          The absolute value of a number is the distance from that number to <m>0</m> on the number line.
          An absolute value is always positive or <m>0</m>.
        </p>
        <p>
          <ol label="a." cols="2">
            <li>
              <p>
                <m>\abs{2}=2</m>
              </p>
            </li>
            <li>
              <p>
                <m>\abs{-\frac{1}{2}}=\frac{1}{2}</m>
              </p>
            </li>
            <li>
              <p>
                <m>\abs{0}=0</m>
              </p>
            </li>
          </ol>
        </p>
      </sidebyside>
    </example>
    <example>
      <title>Square Root</title>
      <sidebyside widths="47% 47%" margins="0%" valign="top">
        <p>
          The symbol <m>\sqrt{b}</m> has meaning when <m>b\geq0</m>.
          It means the positive number that can be squared to result in <m>b</m>.
        </p>
        <p>
          <ol label="a." cols="2">
            <li>
              <p>
                <m>\sqrt{9}=3</m>
              </p>
            </li>
            <li>
              <p>
                <m>\sqrt{2}\approx1.414</m>
              </p>
            </li>
            <li>
              <p>
                <m>\sqrt{\frac{9}{16}}=\frac{3}{4}</m>
              </p>
            </li>
            <li>
              <p>
                <m>\sqrt{-1}\text{ is undefined}</m>
              </p>
            </li>
          </ol>
        </p>
      </sidebyside>
    </example>
  </subsection>
  <subsection>
    <title>Order of Operations</title>
    <example>
      <title>Order of Operations</title>
      <sidebyside widths="47% 47%" margins="0%">
        <p>
          When evaluating an expression with multiple operations,
          we must follow the order of operations:
          <ol>
            <li>
              <p>
                (P)arentheses and other grouping symbols
              </p>
            </li>
            <li>
              <p>
                (E)xponentiation
              </p>
            </li>
            <li>
              <p>
                (M)ultiplication, (D)ivision, and Negation
              </p>
            </li>
            <li>
              <p>
                (A)ddition and (S)ubtraction
              </p>
            </li>
          </ol>
        </p>
        <p>
          <md>
            <mrow>4-2\left( 3-(2-4)^2 \right)\amp=4-2\left( 3-(\nextoperation{2-4})^2 \right)</mrow>
            <mrow>\amp=4-2\left( 3-\nextoperation{(\highlight{-2})^2} \right)</mrow>
            <mrow>\amp=4-2\left( \nextoperation{3-\highlight{4}} \right)</mrow>
            <mrow>\amp=4-\nextoperation{2\left( \highlight{-1} \right)}</mrow>
            <mrow>\amp=4-\highlight{(-2)}</mrow>
            <mrow>\amp=6</mrow>
          </md>
        </p>
      </sidebyside>
    </example>
  </subsection>
  <subsection>
    <title>Set Notation and Types of Numbers</title>
    <p>
      A <term>set</term> is an unordered collection of items.
      Braces, <m>\{{}\}</m>, are used to show what items are in a set.
      For example,
      the set <m>\{1,2,\pi\}</m> is a set with three items that contains the numbers <m>1</m>,
      <m>2</m>,
      and <m>\pi</m>.
    </p>
    <paragraphs>
      <title>Types of Numbers</title>
      <p>
        Real numbers are categorized into the following sets:
        natural numbers, whole numbers,
        integers, rational numbers, and irrational numbers.
      </p>
    </paragraphs>
    <example>
      <p>
        Here are some examples of numbers from each set of numbers:
        <dl>
          <li>
            <title>Natural Numbers</title>
            <p>
              The natural numbers are all counting numbers larger <m>1</m> and larger.
            </p>
            <p>
              <m>1,251,3462</m>
            </p>
          </li>
          <li>
            <title>Whole Numbers</title>
            <p>
              The whole numbers are all counting numbers larger <m>0</m> and larger.
            </p>
            <p>
              <m>0,1,42,953</m>
            </p>
          </li>
          <li>
            <title>Integers</title>
            <p>
              The integers are all counting numbers both negative and positive.
            </p>
            <p>
              <m>-263,-10,0,1,834</m>
            </p>
          </li>
          <li>
            <title>Rational Numbers</title>
            <p>
              The rational numbers are all possible fractions of integers.
            </p>
            <p>
              <m>\frac{1}{3},-3,1.1,0,0.\overline{73}</m>
            </p>
          </li>
          <li>
            <title>Irrational Numbers</title>
            <p>
              The irrational numbers are all numbers that cannot be written as a fraction of integers.
            </p>
            <p>
              <m>\pi,e,\sqrt{2}</m>
            </p>
          </li>
        </dl>
      </p>
    </example>
  </subsection>
  <subsection>
    <title>Comparison Symbols and Notation for Intervals</title>
    <p>
      The following are symbols used to compare numbers.
    </p>
    <table>
      <title>Comparison Symbols</title>
      <tabular valign="top">
        <row bottom="medium">
          <cell>Symbol</cell>
          <cell>Meaning</cell>
          <cell colspan="2" halign="center">Examples</cell>
        </row>
        <row>
          <cell><m>=</m></cell>
          <cell>equals</cell>
          <cell><m>13=13\qquad</m></cell>
          <cell><m>\frac{5}{4}=1.25</m></cell>
        </row>
        <row>
          <cell><m>\gt</m></cell>
          <cell>is greater than</cell>
          <cell><m>13\gt11</m></cell>
          <cell><m>\pi\gt3</m></cell>
        </row>
        <row>
          <cell><m>\geq</m></cell>
          <cell>is greater than or equal to</cell>
          <cell><m>13\geq11</m></cell>
          <cell><m>3\geq3</m></cell>
        </row>
        <row>
          <cell><m>\lt</m></cell>
          <cell>is less than</cell>
          <cell><m>-3\lt8</m></cell>
          <cell><m>\frac{1}{2}\lt\frac{2}{3}</m></cell>
        </row>
        <row>
          <cell><m>\leq</m></cell>
          <cell>is less than or equal to</cell>
          <cell><m>-3\leq8</m></cell>
          <cell><m>3\leq3</m></cell>
        </row>
        <row>
          <cell><m>\neq</m></cell>
          <cell>is not equal to</cell>
          <cell><m>10\neq20</m></cell>
          <cell><m>\frac{1}{2}\neq1.2</m></cell>
        </row>
      </tabular>
    </table>
    <p>
      The following are some examples of set-builder notation and interval notation.
    </p>
    <sbsgroup>
      <sidebyside margins="0%" widths="50% 25% 25%">
        <p>
          Graph
        </p>
        <p>
          Set-Builder Notation
        </p>
        <p>
          Interval Notation
        </p>
      </sidebyside>
      <sidebyside margins="0%" widths="50% 25% 25%">
        <image width="40%">
          <description>a number line graph with a bracket at 1 opening to the right; a thick arrow points to the right</description>
<latex-image>
\begin{tikzpicture}
\begin{axis}[numberline,
xmin=-3,xmax=3,
xtick={-2,-1,...,2},
minor xtick={-2,-1,...,2},
]
\addplot+[closedinfiniteinterval] coordinates {(1,0) (3,0)};
\end{axis}
\end{tikzpicture}
</latex-image>
        </image>
        <p>
          <m>\left\{x\mid x\ge1\right\}</m>
        </p>
        <p>
          <m>[1,\infty)</m>
        </p>
      </sidebyside>
      <sidebyside margins="0%" widths="50% 25% 25%">
        <image width="40%">
          <description>a number line with a parenthesis opening to the right; a thick arrow points to the right</description>
<latex-image>
\begin{tikzpicture}
\begin{axis}[numberline,
xmin=-3,xmax=3,
xtick={-2,-1,...,2},
minor xtick={-2,-1,...,2},
]
\addplot+[openinfiniteinterval] coordinates {(1,0) (3,0)};
\end{axis}
\end{tikzpicture}
</latex-image>
        </image>
        <p>
          <m>\left\{x\mid x\gt1\right\}</m>
        </p>
        <p>
          <m>(1,\infty)</m>
        </p>
      </sidebyside>
      <sidebyside margins="0%" widths="50% 25% 25%">
        <image width="40%">
          <description>a number line with a bracket at 1 opening to the left; a thick arrow points to the left</description>
<latex-image>
\begin{tikzpicture}
\begin{axis}[numberline,
xmin=-3,xmax=3,
xtick={-2,-1,...,2},
minor xtick={-2,-1,...,2},
]
\addplot+[closedinfiniteinterval] coordinates {(1,0) (-3,0)};
\end{axis}
\end{tikzpicture}
</latex-image>
        </image>
        <p>
          <m>\left\{x\mid x\le1\right\}</m>
        </p>
        <p>
          <m>(-\infty,1]</m>
        </p>
      </sidebyside>
      <sidebyside margins="0%" widths="50% 25% 25%">
        <image width="40%">
          <description>a number line with a parenthesis at 1 opening to the left; a thick arrow points to the left</description>
<latex-image>
\begin{tikzpicture}
\begin{axis}[numberline,
xmin=-3,xmax=3,
xtick={-2,-1,...,2},
minor xtick={-2,-1,...,2},
]
\addplot+[openinfiniteinterval] coordinates {(1,0) (-3,0)};
\end{axis}
\end{tikzpicture}
</latex-image>
        </image>
        <p>
          <m>\left\{x\mid x\lt1\right\}</m>
        </p>
        <p>
          <m>(-\infty,1)</m>
        </p>
      </sidebyside>
    </sbsgroup>
  </subsection>
  <exercises>
    <exercisegroup cols="3">
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/AddSubtractNegativeNumbers10.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/AddSubtractNegativeNumbers10.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/MultiplyWithNegativeIntegers20.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/MultiplyWithNegativeIntegers20.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/DivideWithNegativeIntegers10.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/DivideWithNegativeIntegers10.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Exponents/ExponentDefinition30.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Exponents/ExponentDefinition30.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Exponents/ExponentDefinition40.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Exponents/ExponentDefinition40.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/AddFractions80.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/AddFractions80.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/SubtractFractions90.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/SubtractFractions90.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/SubtractFractions110.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/SubtractFractions110.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/MultiplyFractions40.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/MultiplyFractions40.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/MultiplyFractions70.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/MultiplyFractions70.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/DivideFractions20.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/DivideFractions20.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/DivideFractions50.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/FractionArithmetic/DivideFractions50.pg"/>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="2">
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Conversions that need two conversions from the appendix. -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
do {
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
} until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}-&gt;{$unitsout}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor1 = $ORCCAconversions{$unitsin}-&gt;{$unitsmid};
$factor2 = $ORCCAconversions{$unitsmid}-&gt;{$unitsout};
$factor = $factor1*$factor2;
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factor1 &gt; 1) ? $factor1 : 1;
$factorden1 = ($factor1 &gt; 1) ? 1 : 1/$factor1;
$factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit =&gt; $ORCCAunits});
$factornum2 = ($factor2 &gt; 1) ? $factor2 : 1;
$factorden2 = ($factor2 &gt; 1) ? 1 : 1/$factor2;
$factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
do {
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
} until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}-&gt;{$unitsout}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor1 = $ORCCAconversions{$unitsin}-&gt;{$unitsmid};
$factor2 = $ORCCAconversions{$unitsmid}-&gt;{$unitsout};
$factor = $factor1*$factor2;
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factor1 &gt; 1) ? $factor1 : 1;
$factorden1 = ($factor1 &gt; 1) ? 1 : 1/$factor1;
$factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit =&gt; $ORCCAunits});
$factornum2 = ($factor2 &gt; 1) ? $factor2 : 1;
$factorden2 = ($factor2 &gt; 1) ? 1 : 1/$factor2;
$factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
do {
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
} until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}-&gt;{$unitsout}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor1 = $ORCCAconversions{$unitsin}-&gt;{$unitsmid};
$factor2 = $ORCCAconversions{$unitsmid}-&gt;{$unitsout};
$factor = $factor1*$factor2;
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factor1 &gt; 1) ? $factor1 : 1;
$factorden1 = ($factor1 &gt; 1) ? 1 : 1/$factor1;
$factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit =&gt; $ORCCAunits});
$factornum2 = ($factor2 &gt; 1) ? $factor2 : 1;
$factorden2 = ($factor2 &gt; 1) ? 1 : 1/$factor2;
$factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
do {
$unitsin = list_random(lex_sort(keys %ORCCAconversions));
$unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
} until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}-&gt;{$unitsout}));
my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$factor1 = $ORCCAconversions{$unitsin}-&gt;{$unitsmid};
$factor2 = $ORCCAconversions{$unitsmid}-&gt;{$unitsout};
$factor = $factor1*$factor2;
$b = $a*$factor;
$given = NumberWithUnits("$a $unitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factor1 &gt; 1) ? $factor1 : 1;
$factorden1 = ($factor1 &gt; 1) ? 1 : 1/$factor1;
$factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit =&gt; $ORCCAunits});
$factornum2 = ($factor2 &gt; 1) ? $factor2 : 1;
$factorden2 = ($factor2 &gt; 1) ? 1 : 1/$factor2;
$factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Conversions that only need a single conversion from the appendix, but squared or cubed. -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$unitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$dimension = list_random(2,3);
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = map{$_."^$dimension"} ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$dimensionWord = ($dimension == 2) ? 'square' : 'cubic';
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor**$dimension;
$given = NumberWithUnits("$a $unitsin^$dimension", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout^$dimension", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$dimensionWord"/> <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\left(\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}\right)^{<var name="$dimension"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{<var name="$factorden"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsin"/>}^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{1\cdot <var name="$factorden"/>^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$unitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$dimension = list_random(2,3);
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = map{$_."^$dimension"} ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$dimensionWord = ($dimension == 2) ? 'square' : 'cubic';
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor**$dimension;
$given = NumberWithUnits("$a $unitsin^$dimension", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout^$dimension", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$dimensionWord"/> <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\left(\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}\right)^{<var name="$dimension"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{<var name="$factorden"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsin"/>}^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{1\cdot <var name="$factorden"/>^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$unitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$dimension = list_random(2,3);
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = map{$_."^$dimension"} ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$dimensionWord = ($dimension == 2) ? 'square' : 'cubic';
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor**$dimension;
$given = NumberWithUnits("$a $unitsin^$dimension", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout^$dimension", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$dimensionWord"/> <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\left(\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}\right)^{<var name="$dimension"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{<var name="$factorden"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsin"/>}^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{1\cdot <var name="$factorden"/>^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$unitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$dimension = list_random(2,3);
$unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
my @alternatives = map{$_."^$dimension"} ($unitsout, @{$unitAlternatives{$unitsout}});
$word = $unitWords{$unitsout};
$dimensionWord = ($dimension == 2) ? 'square' : 'cubic';
$factor = $ORCCAconversions{$unitsin}-&gt;{$unitsout};
$b = $a*$factor**$dimension;
$given = NumberWithUnits("$a $unitsin^$dimension", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $unitsout^$dimension", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum = ($factor &gt; 1) ? $factor : 1;
$factorden = ($factor &gt; 1) ? 1 : 1/$factor;
$factornumU = NumberWithUnits("$factornum $unitsout", {newUnit =&gt; $ORCCAunits});
$factordenU = NumberWithUnits("$factorden $unitsin", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$dimensionWord"/> <var name="$word"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\left(\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}\right)^{<var name="$dimension"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{<var name="$factorden"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsin"/>}^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{1\cdot <var name="$factorden"/>^{<var name="$dimension"/>}}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Conversions of a rate unit. -->
<!-- Speed -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
do {
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$numunitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
$numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
$denunitsin = list_random('wk','d','h','min','s','ms','ns');
$denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
my @alternatives;
for my $i (@numalternatives) {
for my $j (@denalternatives) {
push(@alternatives, $i.'/'.$j);
};
};
$numword = $unitWords{$numunitsout};
$denword = $unitWord{$denunitsout};
$factornum = $ORCCAconversions{$numunitsin}-&gt;{$numunitsout};
$factorden = $ORCCAconversions{$denunitsin}-&gt;{$denunitsout};
$factor = $factornum/$factorden;
$b = $a*$factor;
} until (abs(log10($b)) &lt; 6);
$given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factornum &gt; 1) ? $factornum : 1;
$factorden1 = ($factornum &gt; 1) ? 1 : 1/$factornum;
$factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2 = ($factorden &gt; 1) ? $factorden : 1;
$factornum2 = ($factorden &gt; 1) ? 1 : 1/$factorden;
$factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Area per unit Time -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
do {
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$numunitsin = list_random('acre','ft^2','mi^2','ha','m^2','km^2');
$numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
$denunitsin = list_random('wk','d','h','min','s','ms','ns');
$denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
my @alternatives;
for my $i (@numalternatives) {
for my $j (@denalternatives) {
push(@alternatives, $i.'/'.$j);
};
};
$numword = $unitWords{$numunitsout};
$denword = $unitWord{$denunitsout};
$factornum = $ORCCAconversions{$numunitsin}-&gt;{$numunitsout};
$factorden = $ORCCAconversions{$denunitsin}-&gt;{$denunitsout};
$factor = $factornum/$factorden;
$b = $a*$factor;
} until (abs(log10($b)) &lt; 6);
$given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factornum &gt; 1) ? $factornum : 1;
$factorden1 = ($factornum &gt; 1) ? 1 : 1/$factornum;
$factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2 = ($factorden &gt; 1) ? $factorden : 1;
$factornum2 = ($factorden &gt; 1) ? 1 : 1/$factorden;
$factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Volume per unit Time -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
do {
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$numunitsin = list_random('gal','in^3','cc','cm^3','mL','L');
$numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
$denunitsin = list_random('wk','d','h','min','s','ms','ns');
$denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
my @alternatives;
for my $i (@numalternatives) {
for my $j (@denalternatives) {
push(@alternatives, $i.'/'.$j);
};
};
$numword = $unitWords{$numunitsout};
$denword = $unitWord{$denunitsout};
$factornum = $ORCCAconversions{$numunitsin}-&gt;{$numunitsout};
$factorden = $ORCCAconversions{$denunitsin}-&gt;{$denunitsout};
$factor = $factornum/$factorden;
$b = $a*$factor;
} until (abs(log10($b)) &lt; 6);
$given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factornum &gt; 1) ? $factornum : 1;
$factorden1 = ($factornum &gt; 1) ? 1 : 1/$factornum;
$factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2 = ($factorden &gt; 1) ? $factorden : 1;
$factornum2 = ($factorden &gt; 1) ? 1 : 1/$factorden;
$factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Weight/Mass per Unit Time -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
do {
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$numunitsin = list_random('lb','oz','T','g','mg','kg','T');
$numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
$denunitsin = list_random('wk','d','h','min','s','ms','ns');
$denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
my @alternatives;
for my $i (@numalternatives) {
for my $j (@denalternatives) {
push(@alternatives, $i.'/'.$j);
};
};
$numword = $unitWords{$numunitsout};
$denword = $unitWord{$denunitsout};
$factornum = $ORCCAconversions{$numunitsin}-&gt;{$numunitsout};
$factorden = $ORCCAconversions{$denunitsin}-&gt;{$denunitsout};
$factor = $factornum/$factorden;
$b = $a*$factor;
} until (abs(log10($b)) &lt; 6);
$given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factornum &gt; 1) ? $factornum : 1;
$factorden1 = ($factornum &gt; 1) ? 1 : 1/$factornum;
$factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2 = ($factorden &gt; 1) ? $factorden : 1;
$factornum2 = ($factorden &gt; 1) ? 1 : 1/$factorden;
$factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Transfer Rate -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
do {
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$numunitsin = list_random('b','B','kb','kB','Mb','MB','GB','TB');
$numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
$denunitsin = list_random('wk','d','h','min','s','ms','ns');
$denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
my @alternatives;
for my $i (@numalternatives) {
for my $j (@denalternatives) {
push(@alternatives, $i.'/'.$j);
};
};
$numword = $unitWords{$numunitsout};
$denword = $unitWord{$denunitsout};
$factornum = $ORCCAconversions{$numunitsin}-&gt;{$numunitsout};
$factorden = $ORCCAconversions{$denunitsin}-&gt;{$denunitsout};
$factor = $factornum/$factorden;
$b = $a*$factor;
} until (abs(log10($b)) &lt; 6);
$given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factornum &gt; 1) ? $factornum : 1;
$factorden1 = ($factornum &gt; 1) ? 1 : 1/$factornum;
$factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2 = ($factorden &gt; 1) ? $factorden : 1;
$factornum2 = ($factorden &gt; 1) ? 1 : 1/$factorden;
$factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- Density/Concentration -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>ORCCA.pl</macro-file></pg-macros>
            <setup>
<pg-code>
do {
$digits = list_random(2,3);
$decimals = random(0,$digits-1,1);
$a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
$numunitsin = list_random('lb','oz','g','mg','kg');
$numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
$denunitsin = list_random('c','pt','qt','gal','in^3','cc','cm^3','mL','L');
$denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
my @alternatives;
for my $i (@numalternatives) {
for my $j (@denalternatives) {
push(@alternatives, $i.'/'.$j);
};
};
$numword = $unitWords{$numunitsout};
$denword = $unitWord{$denunitsout};
$factornum = $ORCCAconversions{$numunitsin}-&gt;{$numunitsout};
$factorden = $ORCCAconversions{$denunitsin}-&gt;{$denunitsout};
$factor = $factornum/$factorden;
$b = $a*$factor;
} until (abs(log10($b)) &lt; 6);
$given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit =&gt; $ORCCAunits});
$get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit =&gt; $ORCCAunits});
$evaluator = $get-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } (@alternatives);
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
$factornum1 = ($factornum &gt; 1) ? $factornum : 1;
$factorden1 = ($factornum &gt; 1) ? 1 : 1/$factornum;
$factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit =&gt; $ORCCAunits});
$factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2 = ($factorden &gt; 1) ? $factorden : 1;
$factornum2 = ($factorden &gt; 1) ? 1 : 1/$factorden;
$factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit =&gt; $ORCCAunits});
$factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit =&gt; $ORCCAunits});
</pg-code>
            </setup>
            <statement>
              <p>
                Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
            <solution>
              <p>
                <md>
                  <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                  <mrow>\amp=<var name="$get"/></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="2">
      <title>Applications</title>
<!-- carpeting -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>PCCmacros.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$sqft = random(90,200,1);
$sqftU = NumberWithUnits("$sqft ft^2");
$sex = list_random('female','male');
$name = RandomName(sex=&gt;$sex);
$Pronoun = ($sex eq 'male') ? 'He' : 'She';
$pronoun = lc($Pronoun);
$sqyd = $sqft/9;
$conversion = {factor =&gt; 0.9144, m =&gt; 1};
$sqydU = NumberWithUnits("$sqyd yd^2",
{newUnit=&gt;[
{name=&gt;'yd', conversion =&gt; $conversion},
{name=&gt;'yard', conversion =&gt; $conversion},
{name=&gt;'yards', conversion =&gt; $conversion},
]}
);
$evaluator = $sqydU-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } ('yd^2','yard^2','yards^2');
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
</pg-code>
            </setup>
            <statement>
              <p>
                <var name="$name"/>'s bedroom has <m><var name="$sqftU"/></m> of floor.
                <var name="$Pronoun"/> would like to carpet the floor,
                but carpeting is sold by the square yard.
                How many square yards of carpeting will <var name="$pronoun"/> need to get?
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- petrol -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>PCCmacros.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$liters = random(26,50,1);
$litersU = NumberWithUnits("$liters L");
$sex = list_random('female','male');
$name = RandomName(sex=&gt;$sex);
$Pronoun = ($sex eq 'male') ? 'He' : 'She';
$pronoun = lc($Pronoun);
$gallons = $liters/3.785;
$conversion = {factor =&gt; 0.003785, m =&gt; 3};
$gallonsU = NumberWithUnits("$gallons gal",
{newUnit=&gt;[
{name=&gt;'gal', conversion =&gt; $conversion},
{name=&gt;'gallon', conversion =&gt; $conversion},
{name=&gt;'gallons', conversion =&gt; $conversion},
]}
);
$evaluator = $gallonsU-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } ('gal','gallon','gallons');
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
</pg-code>
            </setup>
            <statement>
              <p>
                <var name="$name"/> is traveling in Europe and renting a car.
                <var name="$Pronoun"/> is used to thinking of gasoline amounts in gallons,
                but in Europe it is sold in liters.
                After filling the gas tank,
                <var name="$pronoun"/> notices it took <m><var name="$litersU"/></m> of gas.
                How many gallons is that?
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- cooking -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>PCCmacros.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$milliliters = random(100,400,10);
$millilitersU = NumberWithUnits("$milliliters mL", {newUnit =&gt; {name =&gt; 'mL', conversion =&gt; {factor =&gt; 10**-6, m =&gt; 3}}});
$sex = list_random('female','male');
$name = RandomName(sex=&gt;$sex);
$Pronoun = ($sex eq 'male') ? 'He' : 'She';
$pronoun = lc($Pronoun);
$n = list_random(6,7,9,10,11,13,14,15);
$nWord = numberWord($n);
$cups = $milliliters/236.588*$n/4;
$conversion = {factor =&gt; 0.000236588, m =&gt; 3};
$cupsU = NumberWithUnits("$cups c",
{newUnit=&gt;[
{name=&gt;'c', conversion =&gt; $conversion},
{name=&gt;'cup', conversion =&gt; $conversion},
{name=&gt;'cups', conversion =&gt; $conversion},
]}
);
$evaluator = $cupsU-&gt;cmp-&gt;withPostFilter(sub {
my $ans = shift;
if ($ans-&gt;{score}) {
my $correct = $ans-&gt;{correct_value};
my $student = $ans-&gt;{student_value};
my %goodunits = map { $_ =&gt; 1 } ('c','cup','cups');
if (!exists($goodunits{$student-&gt;{units}})) {
$ans-&gt;{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
$ans-&gt;score(0);
}
}
return $ans;
});
</pg-code>
            </setup>
            <statement>
              <p>
                <var name="$name"/> found a family recipe from the old country that uses <m><var name="$millilitersU"/></m> of soup stock.
                The recipe serves four,
                but <var name="$name"/> wants to scale it up to serve <var name="$nWord"/>.
                And none of <var name="$name"/>'s measuring devices use the metric system.
                How many cups of soup stock should <var name="$pronoun"/> use?
              </p>
              <p>
                <var name="$evaluator" width="20"/>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- Find distance traveled -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>PCCmacros.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$mph = random(21,68,1);
$mphU = NumberWithUnits("$mph mph");
$min = random(3,23,1);
$minU = NumberWithUnits("$min min");
$hours = $min/60;
$miles = $mph*$hours;
$milesU = NumberWithUnits("$miles mi");
$sex = list_random('female','male');
$name = RandomName(sex=&gt;$sex);
$Pronoun = ($sex eq 'male') ? 'He' : 'She';
$pronoun = lc($Pronoun);
</pg-code>
            </setup>
            <statement>
              <p>
                <var name="$name"/> was driving at a steady speed of <m><var name="$mphU"/></m> for <m><var name="$min"/></m> minutes.
                How far did <var name="$pronoun"/> travel in that time?
              </p>
              <p>
                <var name="$milesU" width="20"/>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- biomass growth -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>PCCmacros.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$d = {name=&gt;'d',conversion=&gt;{factor=&gt;24*60*60,s=&gt;1}};
$wk = {name=&gt;'wk',conversion=&gt;{factor=&gt;7*24*60*60,s=&gt;1}};
$rate = random(0.1,0.5,0.01);
$rateU = NumberWithUnits("$rate kg/d", {newUnit =&gt; $d});
$weeks = random(3,23,1);
$weeksU = NumberWithUnits("$weeks wk", {newUnit =&gt; $wk});
$days = $weeks*7;
$kilograms = $rate*$days;
$kilogramsU = NumberWithUnits("$kilograms kg");
</pg-code>
            </setup>
            <statement>
              <p>
                The algae in a pond is growing at a rate of <m><var name="$rateU"/></m>.
                How much algae is in the pond after <m><var name="$weeks"/></m> weeks?
              </p>
              <p>
                <var name="$kilogramsU" width="20"/>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- data transfer -->
      <exercise>
        <webwork>
            <pg-macros><macro-file>PCCmacros.pl</macro-file></pg-macros>
            <setup>
<pg-code>
$b = {name=&gt;'b'};
$B = {name=&gt;'B', conversion=&gt;{factor =&gt; 8, b =&gt; 1}};
$kb = {name=&gt;'kb', conversion=&gt;{factor =&gt; 2**10, b =&gt; 1}};
$kB = {name=&gt;'kB', conversion=&gt;{factor =&gt; 8*2**10, b =&gt; 1}};
$Mb = {name=&gt;'Mb', conversion=&gt;{factor =&gt; 2**20, b =&gt; 1}};
$MB = {name=&gt;'MB', conversion=&gt;{factor =&gt; 8*2**20, b =&gt; 1}};
$GB = {name=&gt;'GB', conversion=&gt;{factor =&gt; 2**30, b =&gt; 1}};
$TB = {name=&gt;'TB', conversion=&gt;{factor =&gt; 8*2**30, b =&gt; 1}};
$Mbps = {name=&gt;'Mbps', conversion=&gt;{factor =&gt; 2**20, b =&gt; 1, s =&gt; -1}};
$rate = random(10,100,1);
$rateU = NumberWithUnits("$rate Mbps", {newUnit =&gt; $Mbps});
$minutes = random(12,199,1);
$minutesU = NumberWithUnits("$minutes min");
$seconds = $minutes*60;
$megabytes = $rate*$seconds/8;
$megabytesU = NumberWithUnits("$megabytes MB", {newUnit =&gt; [$B,$kB,$MB,$GB,$TB]});
$sex = list_random('female','male');
$name = RandomName(sex=&gt;$sex);
$Pronoun = ($sex eq 'male') ? 'He' : 'She';
$pronoun = lc($Pronoun);
</pg-code>
            </setup>
            <statement>
              <p>
                <var name="$name"/> is downloading content at an average rate of <m><var name="$rateU"/></m>
                (megabits per second).
                After <m><var name="$minutes"/></m> minutes,
                how much has <var name="$pronoun"/> downloaded?
                It is appropriate to express an amount of data like this in bytes,
                kilobytes,
                megabytes, gigabytes, or terabytes.
              </p>
              <p>
                <var name="$megabytesU" width="20"/>
              </p>
            </statement>
        </webwork>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="3">
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/AbsoluteValue30.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/AbsoluteValue30.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/IntegerAndSquareRoot/identifySquareNumbers20.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/IntegerAndSquareRoot/identifySquareNumbers20.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/IntegerAndSquareRoot/identifySquareNumbers30.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/IntegerAndSquareRoot/identifySquareNumbers30.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations160.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations160.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations180.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations180.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations220.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/OrderOfOperations/orderOfOperations220.pg"/>
      </exercise>
    </exercisegroup>
    <newpage/>
    <exercisegroup cols="2">
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/IntegerAndSquareRoot/CompareNumbers50.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/IntegerAndSquareRoot/CompareNumbers50.pg"/>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="2">
      <exercise>
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Number_Systems/Determine_Number_Type_TF_01.pg"/>
      </exercise>
      <exercise>
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Number_Systems/Determine_Number_Type_TF_02.pg"/>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="2">
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation40.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation40.pg"/>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="3">
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg"/>
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg"/>
      </exercise>
        <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg"/>
      </exercise>
      
    </exercisegroup>

    <!-- <exercise>
      <webwork>
          <setup>
<pg-code>
($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
%left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
%right=(oi=>')',ci=>')',io=>')',ic=>']');
@type=('oi','ci','io','ic')[NchooseK(4,3)];
@ticks = ();
for my $j (-5..5) {push(@ticks,$j);};
for my$i(0,1,2){
$nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
$nl[$i]->moveTo(0,0);
$nl[$i]->arrowTo(5.5,0,'black',1);
$nl[$i]->moveTo(0,0);
$nl[$i]->arrowTo(-5.5,0,'black',1);
$nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
$nl[$i]->h_ticks(0,"black",@ticks);
};
$shadingoffset = 0.5;
for my$i(0..2){
if($type[$i]eq'oi' or $type[$i]eq'ci'){
$nl[$i]->moveTo($a[$i],$shadingoffset);
$nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
$nl[$i]->moveTo($a[$i],$shadingoffset);
$nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
}else{
$nl[$i]->moveTo($b[$i],$shadingoffset);
$nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
$nl[$i]->moveTo($b[$i],$shadingoffset);
$nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
};
if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
};
InequalitySetBuilder::UseVerticalSuchThat();
Context("InequalitySetBuilder-Only");
for my$i(0..2){
if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
};
Context("Interval");
Context()->flags->set("formatStudentAnswer"=>'parsed');
for my$i(0..2){
if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
else{$in[$i]=Compute("(-inf,$b[$i]]");}
};
</pg-code>
          </setup>
          <statement>
            <p>
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p>
              <ol label="a." cols="3">
                <li>
                  <sidebyside margins="0%" widths="40%">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>
                  <p>
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>
                  <p>
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>
                <li>
                  <sidebyside margins="0%" widths="40%">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>
                  <p>
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>
                  <p>
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>
                <li>
                  <sidebyside margins="0%" widths="40%">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>
                  <p>
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>
                  <p>
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
      </webwork>
    </exercise>
    <exercise>
      <webwork>
          <setup>
<pg-code>
($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
%left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
%right=(oi=>')',ci=>')',io=>')',ic=>']');
@type=('oi','ci','io','ic')[NchooseK(4,3)];
@ticks = ();
for my $j (-5..5) {push(@ticks,$j);};
for my$i(0,1,2){
$nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
$nl[$i]->moveTo(0,0);
$nl[$i]->arrowTo(5.5,0,'black',1);
$nl[$i]->moveTo(0,0);
$nl[$i]->arrowTo(-5.5,0,'black',1);
$nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
$nl[$i]->h_ticks(0,"black",@ticks);
};
$shadingoffset = 0.5;
for my$i(0..2){
if($type[$i]eq'oi' or $type[$i]eq'ci'){
$nl[$i]->moveTo($a[$i],$shadingoffset);
$nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
$nl[$i]->moveTo($a[$i],$shadingoffset);
$nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
}else{
$nl[$i]->moveTo($b[$i],$shadingoffset);
$nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
$nl[$i]->moveTo($b[$i],$shadingoffset);
$nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
};
if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
};
InequalitySetBuilder::UseVerticalSuchThat();
Context("InequalitySetBuilder-Only");
for my$i(0..2){
if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
};
Context("Interval");
Context()->flags->set("formatStudentAnswer"=>'parsed');
for my$i(0..2){
if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
else{$in[$i]=Compute("(-inf,$b[$i]]");}
};
</pg-code>
          </setup>
          <statement>
            <p>
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p>
              <ol label="a." cols="3">
                <li>
                  <sidebyside margins="0%" widths="40%">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>
                  <p>
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>
                  <p>
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>
                <li>
                  <sidebyside margins="0%" widths="40%">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>
                  <p>
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>
                  <p>
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>
                <li>
                  <sidebyside margins="0%" widths="40%">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>
                  <p>
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>
                  <p>
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
      </webwork>
    </exercise> -->
  </exercises>
</section>
