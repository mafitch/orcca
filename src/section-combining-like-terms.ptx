<?xml version="1.0" encoding="UTF-8"?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section xml:id="section-combining-like-terms" permid="lGa">
  <title>Combining Like Terms</title>
  <introduction permid="Fds">
    <p permid="hUJ">
      In the last section we worked with algebraic expressions.
      In order to simplify algebraic expressions,
      it is useful to identify which quantities we can combine.
    </p>
  </introduction>
  <subsection permid="RNj">
    <title>Identifying Terms</title>
    <p permid="now">
      In an algebraic expression, the <term>terms</term>
          <idx><h>term</h></idx>
      are the quantities that are added.
      For example, the expression <m>3x+2y</m> has two terms,
      which are <m>3x</m> and <m>2y</m>.
      Let's look at some more examples.
    </p>
    <example permid="qZN">
      <p permid="HCM">
        List the terms in the expression <m>2l+2w</m>.
      </p>
      <p permid="nJV">
        The expression has two terms that are being added, <m>2l</m> and <m>2w</m>.
      </p>
    </example>
    <p permid="TvF">
      If there is any subtraction, we will rewrite the expression using addition.
      Here is an example of that.
    </p>
    <example permid="XgW">
      <p permid="TRe">
        List the terms in the expression <m>-3x^2+5x-4</m>.
      </p>
      <p permid="zYn">
        We can rewrite this expression as
        <m>-3x^2+5x+(-4)</m> to see that the terms are <m>-3x^2</m>,
        <m>5x</m>,
        and <m>-4</m>.
        The last term is negative because subtracting is the same as adding the opposite.
      </p>
    </example>
    <example permid="Dof">
      <p permid="gfw">
        List the terms in the expression <m>3\,\text{cm}+2\,\text{cm}+3\,\text{cm}+2\,\text{cm}</m>.
      </p>
      <p permid="MmF">
        This expression has four terms:
        <quantity>
          <mag>3</mag><unit base="meter" prefix="centi"/>
        </quantity>,
        <quantity>
          <mag>2</mag><unit base="meter" prefix="centi"/>
        </quantity>,
        <quantity>
          <mag>3</mag><unit base="meter" prefix="centi"/>
        </quantity>, and
        <quantity>
          <mag>2</mag><unit base="meter" prefix="centi"/>
        </quantity>.
      </p>
    </example>
    <exercise permid="jvo">
      <webwork>
          <setup>
<pg-code>
Context("Numeric");
Context()-&gt;variables-&gt;are(x=&gt;'Real',z=&gt;'Real');
$terms = List("5x, -4x, 10z");
</pg-code>
          </setup>
          <statement>
            <p permid="ObS">
              List the terms in the expression <m>5x-4x+10z</m>.
            </p>
            <instruction>
              Enter the terms separated by commas.
            </instruction>
            <p permid="ujb">
              <var name="$terms" width="15"/>
            </p>
          </statement>
          <solution permid="lkB">
            <p permid="lUI">
              The terms are <m>5x</m>, <m>-4x</m>, and <m>10z</m>.
            </p>
          </solution>
      </webwork>
    </exercise>
  </subsection>
<!--TODO: Alex, if time: add a visual introduction/explanation of how feet and square feet cannot combine-->
  <subsection permid="xUs">
    <title>Combining Like Terms</title>
    <p permid="zCO">
      In the examples above, you may have wanted to combine some of the terms.
      Look at the quantities below to see which ones you can add or subtract.
    </p>
    <sidebyside margins="0%" permid="Atz">
      <tabular halign="center" permid="wIi">
        <row>
          <cell><quantity>
              <mag>5</mag><unit base="inch"/>
            </quantity>
            <m>{}+{}</m><quantity>
              <mag>20</mag><unit base="inch"/>
            </quantity></cell>
          <cell><quantity>
              <mag>16</mag><unit base="foot"/>
            </quantity>
            <m>{}-{}</m><quantity>
              <mag>4</mag><unit base="foot" exp="2"/>
            </quantity></cell>
        </row>
        <row>
          <cell><m>2</m> apples <m>+ 5</m> apples</cell>
          <cell><m>5</m> minutes <m>+ 50</m> feet</cell>
        </row>
        <row>
          <cell><m>5\dog-2\cat</m></cell>
          <cell><quantity>
              <mag>20</mag><unit base="meter"/>
            </quantity>
            <m>{}-{}</m><quantity>
              <mag>6</mag><unit base="meter"/>
            </quantity></cell>
        </row>
      </tabular>
    </sidebyside>
    <p permid="fJX">
      The terms that we can combine are called <term>like terms</term>.
          <idx><h>like term</h></idx>
      We can combine terms with the same units,
      but we cannot combine units such as minutes and feet or cats and dogs.
      Here are the answers:
    </p>
    <sidebyside margins="0%" permid="gAI">
      <tabular halign="center" permid="cPr">
        <row>
          <cell><quantity>
              <mag>5</mag><unit base="inch"/>
            </quantity>
            <m>{}+{}</m><quantity>
              <mag>20</mag><unit base="inch"/>
            </quantity>
            <m>{}={}</m><quantity>
              <mag>25</mag><unit base="inch"/>
            </quantity></cell>
          <cell><quantity>
              <mag>16</mag><unit base="foot"/>
            </quantity>
            <m>{}-{}</m><quantity>
              <mag>4</mag><unit base="foot" exp="2"/>
            </quantity>
            cannot be simplified</cell>
        </row>
        <row>
          <cell><m>2</m> apples <m>+ 5</m> apples <m>=7</m> apples</cell>
          <cell><m>5</m> minutes <m>+ 50</m> feet cannot be simplified</cell>
        </row>
        <row>
          <cell><m>5\dog-2\cat</m> cannot be simplified</cell>
          <cell><quantity>
              <mag>20</mag><unit base="meter"/>
            </quantity>
            <m>{}-{}</m><quantity>
              <mag>6</mag><unit base="meter"/>
            </quantity>
            <m>{}={}</m><quantity>
              <mag>14</mag><unit base="meter"/>
            </quantity></cell>
        </row>
      </tabular>
    </sidebyside>
    <p permid="LRg">
      Note that we could combine units such as feet and inches if we convert one of the terms first.
      Now let's look at some examples that have variables in them.
      Which ones can you combine?
    </p>
<!--TODO: make WW popup yes/no-->
    <sidebyside margins="0%" permid="MHR">
      <tabular halign="center" permid="IWA">
        <row>
          <cell><m>10x+3y</m></cell>
          <cell><m>4x-8x</m></cell>
        </row>
        <row>
          <cell><m>9y-4y</m></cell>
          <cell><m>-6x+17z</m></cell>
        </row>
        <row>
          <cell><m>-3x-7x</m></cell>
          <cell><m>5t+8t^2</m></cell>
        </row>
      </tabular>
    </sidebyside>
    <p permid="rYp">
      The terms that we can combine have the same variable part,
      including any exponents.
      Here are the answers:
    </p>
    <sidebyside margins="0%" permid="sPa">
      <tabular halign="center" permid="pdJ">
        <row>
          <cell><m>10x+3y</m> cannot be simplified</cell>
          <cell><m>4x-8x=-4x</m></cell>
        </row>
        <row>
          <cell><m>9y-4y=5y</m></cell>
          <cell><m>-6x+17z</m> cannot be simplified</cell>
        </row>
        <row>
          <cell><m>-3x-7x=-10x</m></cell>
          <cell><m>5t+8t^2</m> cannot be simplified</cell>
        </row>
      </tabular>
    </sidebyside>
    <example permid="PCx">
      <p permid="stO">
        Simplify the expression <m>20x-16x+4y</m>,
        if possible, by combining like terms.
      </p>
      <p permid="YAX">
        This expression has two like terms,
        <m>20x</m> and <m>-16x</m>, which we can combine.
        <me permid="EmH">
          20x-16x+4y=4x+4y
        </me>
        Note that we cannot combine <m>4x</m> and <m>4y</m> because <m>x</m> and <m>y</m> represent different quantities.
      </p>
    </example>
    <example permid="vJG">
      <p permid="EIg">
        Simplify the expression <m>100x+100x^2</m>,
        if possible, by combining like terms.
      </p>
      <p permid="kPp">
        This expression cannot be simplified because the variable parts are not the same.
        We cannot add <m>x</m> and <m>x^2</m> just like we cannot add feet,
        a measure of length, and square feet, a measure of area.
      </p>
    </example>
    <example permid="bQP">
      <p permid="QWy">
        Simplify the expression <m>-10r+2s-5t</m>,
        if possible, by combining like terms.
      </p>
      <p permid="xdH">
        This expression cannot be simplified because there are not any like terms.
      </p>
    </example>
    <example permid="HXY">
      <p permid="dkQ">
        Simplify the expression <m>y+5y</m>,
        if possible, by combining like terms.
      </p>
      <p permid="JrZ">
        This expression can be thought of as <m>1y+5y</m>.
        When we have a single <m>y</m>,
        the coefficient of <m>1</m> is not usually written.
        Now we have two like terms, <m>1y</m> and <m>5y</m>.
        We will add those together:
        <md permid="ktQ">
          <mrow>y+5y\amp=1y+5y</mrow>
          <mrow>\amp=6y</mrow>
        </md>
      </p>
    </example>
    <p permid="Yfy">
      So far we have combined terms with whole numbers and integers,
      but we can also combine like terms when the coefficients are decimals
      (or fractions).
    </p>
    <example permid="ofh">
      <p permid="pzi">
        Simplify the expression <m>x-0.15x</m>,
        if possible, by combining like terms.
      </p>
      <p permid="VGr">
        Note that this expression can be rewritten as
        <m>1.00x-0.15x</m>, and combined like this:
        <md permid="QAZ">
          <mrow>x-0.15x\amp=1.00x-0.15x</mrow>
          <mrow>\amp=0.85x</mrow>
        </md>
      </p>
    </example>
    <exercise permid="YWj">
      <webwork>
          <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
$ans[0]=Formula("14x-7y");
$ans[1]=Formula("-7y+2x^2");
$ans[2]=Formula("1.25x");
$ans[3]=Formula("4x+1.5y-9z");
for $i (0..3) {
$evaluator[$i] = $ans[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
          </setup>
          <statement>
            <p permid="aqk">
              Simplify each expression, if possible, by combining like terms.
            </p>
            <instruction>
              If the expression cannot be simplified further, just enter it as it is.
            </instruction>
            <p permid="Gxt">
              <ol label="a." cols="2" permid="wtA">
                <li permid="HCz">
                  <p permid="Kqb">
                    <m>4x-7y+10x</m>
                  </p>
                  <p permid="qxk">
                    <var name="$evaluator[0]" width="25"/>
                  </p>
                </li>
                <li permid="nJI">
                  <p permid="WEt">
                    <m>y-8y+2x^2</m>
                  </p>
                  <p permid="CLC">
                    <var name="$evaluator[1]" width="25"/>
                  </p>
                </li>
                <li permid="TQR">
                  <p permid="iSL">
                    <m>x+0.25x</m>
                  </p>
                  <p permid="OZU">
                    <var name="$evaluator[2]" width="25"/>
                  </p>
                </li>
                <li permid="zYa">
                  <p permid="vhd">
                    <m>4x+1.5y-9z</m>
                  </p>
                  <p permid="bom">
                    <var name="$evaluator[3]" width="25"/>
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution permid="RrK">
            <p permid="SbR">
              <ol label="a." permid="GSF">
                <li permid="gfj">
                  <p permid="Hvv">
                    This expression has two like terms that can be combined to get <m>14x-7y</m>.
                  </p>
                </li>
                <li permid="Mms">
                  <p permid="nCE">
                    In this expression we can combine the <m>y</m> terms to get <m>-7y+2x^2</m>.
                  </p>
                </li>
                <li permid="stB">
                  <p permid="TJN">
                    Rewrite this expression as
                    <m>1.00x+0.25x</m> and simplify to get <m>1.25x</m>.
                  </p>
                </li>
                <li permid="YAK">
                  <p permid="zQW">
                    This expression cannot be simplified further because there are not any like terms.
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>
    <remark permid="Umq">
      <title>The Difference Between Terms and Factors</title>
      <p permid="BNA">
        We have learned that terms are quantities that are added,
        such as <m>3x</m> and <m>-2x</m> in <m>3x-2x</m>.
        These are different than <term>factors</term>,
            <idx><h>factor</h></idx>
        which are parts that are multiplied together.
        For example, the term <m>2x</m> has two factors:
        <m>2</m> and <m>x</m>
        (with the multiplication symbol implied between them).
        The term <m>2\pi r</m> has three factors:
        <m>2</m>, <m>\pi</m>, and <m>r</m>.
      </p>
    </remark>
  </subsection>
  <exercises permid="ebB">
    <exercisegroup cols="3" permid="KiK">
      <title>Review and Warmup</title>
      <exercise permid="CEl">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"/>
      </exercise>
      <exercise permid="iLu">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"/>
      </exercise>
      <exercise permid="OSD">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"/>
      </exercise>
      <exercise permid="uZM">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"/>
      </exercise>
      <exercise permid="bgV">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"/>
      </exercise>
      <exercise permid="Hoe">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"/>
      </exercise>
      <exercise permid="nvn">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"/>
      </exercise>
      <exercise permid="TCw">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"/>
      </exercise>
      <exercise permid="zJF">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"/>
      </exercise>
      <exercise permid="fQO">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"/>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="2" permid="qpT">
      <title>Identifying Terms</title>
      <exercise permid="LXX">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$answer[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="mEC">
                Count the number of terms in each expression.</p>
                <p>
                <ol label="a." permid="cAJ">
                  <li permid="EHT">
                    <p permid="fYf">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="Mfo">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="kPc">
                    <p permid="smx">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="YtG">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="QWl">
                    <p permid="EAP">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="kHY">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="xdu">
                    <p permid="QPh">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="wWq">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="xyT">
              <p permid="yja">
                <ol label="a." permid="mZO">
                  <li permid="dkD">
                    <p permid="ddz">
                      This expression has <m><var name="$answers[0]"/></m> terms.
                    </p>
                  </li>
                  <li permid="JrM">
                    <p permid="JkI">
                      This expression has <m><var name="$answers[1]"/></m> terms.
                    </p>
                  </li>
                  <li permid="pyV">
                    <p permid="prR">
                      This expression has <m><var name="$answers[2]"/></m> terms.
                    </p>
                  </li>
                  <li permid="VGe">
                    <p permid="Vza">
                      This expression has <m><var name="$answers[3]"/></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise permid="sfg">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$answer[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="SLL">
                Count the number of terms in each expression.</p>
                <p>
                <ol label="a." permid="IHS">
                  <li permid="BNn">
                    <p permid="BGj">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="hNs">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="hUw">
                    <p permid="NUB">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="ubK">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="ObF">
                    <p permid="aiT">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="Gqc">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="uiO">
                    <p permid="mxl">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="SEu">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="dGc">
              <p permid="eqj">
                <ol label="a." permid="TgX">
                  <li permid="apX">
                    <p permid="yLD">
                      This expression has <m><var name="$answers[0]"/></m> terms.
                    </p>
                  </li>
                  <li permid="Gxg">
                    <p permid="eSM">
                      This expression has <m><var name="$answers[1]"/></m> terms.
                    </p>
                  </li>
                  <li permid="mEp">
                    <p permid="KZV">
                      This expression has <m><var name="$answers[2]"/></m> terms.
                    </p>
                  </li>
                  <li permid="SLy">
                    <p permid="rhe">
                      This expression has <m><var name="$answers[3]"/></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- decimal coefficients -->
      <exercise permid="Ymp">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$answer[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="ySU">
                Count the number of terms in each expression.</p>
                <p>
                <ol label="a." permid="oPb">
                  <li permid="ySH">
                    <p permid="Xon">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="Dvw">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="eZQ">
                    <p permid="jCF">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="PJO">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="LgZ">
                    <p permid="vQX">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="bYg">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="roi">
                    <p permid="Ifp">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="omy">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="JNl">
              <p permid="Kxs">
                <ol label="a." permid="zog">
                  <li permid="Xvr">
                    <p permid="UtH">
                      This expression has <m><var name="$answers[0]"/></m> terms.
                    </p>
                  </li>
                  <li permid="DCA">
                    <p permid="AAQ">
                      This expression has <m><var name="$answers[1]"/></m> terms.
                    </p>
                  </li>
                  <li permid="jJJ">
                    <p permid="gHZ">
                      This expression has <m><var name="$answers[2]"/></m> terms.
                    </p>
                  </li>
                  <li permid="PQS">
                    <p permid="MPi">
                      This expression has <m><var name="$answers[3]"/></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise permid="Ety">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$answer[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="fad">
                Count the number of terms in each expression.</p>
                <p>
                <ol label="a." permid="UWk">
                  <li permid="vYb">
                    <p permid="sWr">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="ZdA">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="cfk">
                    <p permid="FkJ">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="lrS">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="Imt">
                    <p permid="Rzb">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="xGk">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                  <li permid="otC">
                    <p permid="dNt">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="JUC">
                      <var name="$answer[d]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="pUu">
              <p permid="qEB">
                <ol label="a." permid="fvp">
                  <li permid="UAL">
                    <p permid="qbL">
                      This expression has <m><var name="$answers[0]"/></m> terms.
                    </p>
                  </li>
                  <li permid="AHU">
                    <p permid="WiU">
                      This expression has <m><var name="$answers[1]"/></m> terms.
                    </p>
                  </li>
                  <li permid="gPd">
                    <p permid="Cqd">
                      This expression has <m><var name="$answers[2]"/></m> terms.
                    </p>
                  </li>
                  <li permid="MWm">
                    <p permid="ixm">
                      This expression has <m><var name="$answers[3]"/></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- List terms -->
      <exercise permid="kAH">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
$answers[$i] = List();
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
$answers[$i] = List($answers[$i],Formula("$string")-&gt;reduce-&gt;reduce);
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="Lhm">
                List the terms in each expression.</p>
                <p>
                <ol label="a." permid="Bdt">
                  <li permid="tdv">
                    <p permid="OEv">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="uLE">
                      <var name="$answers[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="ZkE">
                    <p permid="aSN">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="GZW">
                      <var name="$answers[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="FrN">
                    <p permid="nhf">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="Too">
                      <var name="$answers[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="lyW">
                    <p permid="zvx">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="fCG">
                      <var name="$answers[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="WbD">
              <p permid="WLK">
                <ol label="a." permid="LCy">
                  <li permid="RGf">
                    <p permid="LJP">
                      The terms are <m><var name="$answers[0]"/></m>.
                    </p>
                  </li>
                  <li permid="xNo">
                    <p permid="rQY">
                      The terms are <m><var name="$answers[1]"/></m>.
                    </p>
                  </li>
                  <li permid="dUx">
                    <p permid="XYh">
                      The terms are <m><var name="$answers[2]"/></m>.
                    </p>
                  </li>
                  <li permid="KbG">
                    <p permid="Efq">
                      The terms are <m><var name="$answers[3]"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise permid="QHQ">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
$answers[$i] = List();
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
$answers[$i] = List($answers[$i],Formula("$string")-&gt;reduce-&gt;reduce);
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="rov">
                List the terms in each expression.</p>
                <p>
                <ol label="a." permid="hkC">
                  <li permid="qiP">
                    <p permid="kmz">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="QtI">
                      <var name="$answers[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="WpY">
                    <p permid="wAR">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="IPj">
                      <var name="$answers[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="Cxh">
                    <p permid="oWs">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="VdB">
                      <var name="$answers[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="iEq">
                    <p permid="BkK">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="hrT">
                      <var name="$answers[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="CiM">
              <p permid="CST">
                <ol label="a." permid="rJH">
                  <li permid="OLz">
                    <p permid="Nzc">
                      The terms are <m><var name="$answers[0]"/></m>.
                    </p>
                  </li>
                  <li permid="uSI">
                    <p permid="tGl">
                      The terms are <m><var name="$answers[1]"/></m>.
                    </p>
                  </li>
                  <li permid="aZR">
                    <p permid="ZNu">
                      The terms are <m><var name="$answers[2]"/></m>.
                    </p>
                  </li>
                  <li permid="Hha">
                    <p permid="FUD">
                      The terms are <m><var name="$answers[3]"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- decimal coefficients -->
      <exercise permid="wOZ">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
$answers[$i] = List();
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
$answers[$i] = List($answers[$i],Formula("$string")-&gt;reduce-&gt;reduce);
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="XvE">
                List the terms in each expression.</p>
                <p>
                <ol label="a." permid="NrL">
                  <li permid="noj">
                    <p permid="mbM">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="SiV">
                      <var name="$answers[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="Tvs">
                    <p permid="yqe">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="exn">
                      <var name="$answers[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="zCB">
                    <p permid="KEw">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="qLF">
                      <var name="$answers[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="fJK">
                    <p permid="WSO">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="CZX">
                      <var name="$answers[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="ipV">
              <p permid="jac">
                <ol label="a." permid="XQQ">
                  <li permid="LQT">
                    <p permid="jhg">
                      The terms are <m><var name="$answers[0]"/></m>.
                    </p>
                  </li>
                  <li permid="rYc">
                    <p permid="Pop">
                      The terms are <m><var name="$answers[1]"/></m>.
                    </p>
                  </li>
                  <li permid="Yfl">
                    <p permid="vvy">
                      The terms are <m><var name="$answers[2]"/></m>.
                    </p>
                  </li>
                  <li permid="Emu">
                    <p permid="bCH">
                      The terms are <m><var name="$answers[3]"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise permid="cWi">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
$answers[$i] = List();
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
$answers[$i] = List($answers[$i],Formula("$string")-&gt;reduce-&gt;reduce);
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="DCN">
                List the terms in each expression.</p>
                <p>
                <ol label="a." permid="tyU">
                  <li permid="ktD">
                    <p permid="HJQ">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="nQZ">
                      <var name="$answers[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="QAM">
                    <p permid="TYi">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="Afr">
                      <var name="$answers[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="wHV">
                    <p permid="gmA">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="MtJ">
                      <var name="$answers[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="cPe">
                    <p permid="sAS">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="YIb">
                      <var name="$answers[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Oxe">
              <p permid="Phl">
                <ol label="a." permid="DXZ">
                  <li permid="IWn">
                    <p permid="EPk">
                      The terms are <m><var name="$answers[0]"/></m>.
                    </p>
                  </li>
                  <li permid="pdw">
                    <p permid="kWt">
                      The terms are <m><var name="$answers[1]"/></m>.
                    </p>
                  </li>
                  <li permid="VkF">
                    <p permid="RdC">
                      The terms are <m><var name="$answers[2]"/></m>.
                    </p>
                  </li>
                  <li permid="BrO">
                    <p permid="xkL">
                      The terms are <m><var name="$answers[3]"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
<!-- fraction coefficients -->
      <exercise permid="Jdr">
        <webwork>
            <setup>
<pg-code>
Context("Fraction");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;flags-&gt;set(reduceConstants=&gt;0);
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
$answers[$i] = List();
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
$answers[$i] = List($answers[$i],Formula("$string")-&gt;reduce-&gt;reduce);
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="jJW">
                List the terms in each expression.</p>
                <p>
                <ol label="a." permid="ZGd">
                  <li permid="hyX">
                    <p permid="drU">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="Jzd">
                      <var name="$answers[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="NGg">
                    <p permid="pGm">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="VNv">
                      <var name="$answers[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="tNp">
                    <p permid="BUE">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="ibN">
                      <var name="$answers[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="ZUy">
                    <p permid="OiW">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="uqf">
                      <var name="$answers[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="uEn">
              <p permid="vou">
                <ol label="a." permid="kfi">
                  <li permid="GbH">
                    <p permid="axo">
                      The terms are <m><var name="$answers[0]"/></m>.
                    </p>
                  </li>
                  <li permid="miQ">
                    <p permid="GEx">
                      The terms are <m><var name="$answers[1]"/></m>.
                    </p>
                  </li>
                  <li permid="SpZ">
                    <p permid="mLG">
                      The terms are <m><var name="$answers[2]"/></m>.
                    </p>
                  </li>
                  <li permid="yxi">
                    <p permid="SSP">
                      The terms are <m><var name="$answers[3]"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <exercise permid="pkA">
        <webwork>
            <setup>
<pg-code>
Context("Fraction");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;flags-&gt;set(reduceConstants=&gt;0);
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
@termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
$answers[$i] = List();
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random('x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+ $string")-&gt;reduce-&gt;reduce;
$answers[$i] = List($answers[$i],Formula("$string")-&gt;reduce-&gt;reduce);
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
</pg-code>
            </setup>
            <statement>
              <p permid="PRf">
                List the terms in each expression.</p>
                <p>
                <ol label="a." permid="FNm">
                  <li permid="eEr">
                    <p permid="yZY">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="fhh">
                      <var name="$answers[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="KLA">
                    <p permid="Loq">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="rvz">
                      <var name="$answers[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="qSJ">
                    <p permid="XCI">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="DJR">
                      <var name="$answers[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="WZS">
                    <p permid="jRa">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="PYj">
                      <var name="$answers[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="aLw">
              <p permid="bvD">
                <ol label="a." permid="Qmr">
                  <li permid="Dhb">
                    <p permid="wfs">
                      The terms are <m><var name="$answers[0]"/></m>.
                    </p>
                  </li>
                  <li permid="jok">
                    <p permid="cmB">
                      The terms are <m><var name="$answers[1]"/></m>.
                    </p>
                  </li>
                  <li permid="Pvt">
                    <p permid="ItK">
                      The terms are <m><var name="$answers[2]"/></m>.
                    </p>
                  </li>
                  <li permid="vCC">
                    <p permid="oAT">
                      The terms are <m><var name="$answers[3]"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
    </exercisegroup>
    <exercisegroup cols="2" permid="Wxc">
      <title>Combining Like Terms</title>
<!-- two terms only -->
      <exercise permid="VrJ">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="vYo">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="cfx">
                <ol label="a." permid="lUv">
                  <li permid="bJL">
                    <p permid="UIc">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="APl">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="HQU">
                    <p permid="gWu">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="NdD">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="nYd">
                    <p permid="tkM">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="ZrV">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="Ufm">
                    <p permid="Fze">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="lGn">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="ByS">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="ImG">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="otP">
                <ol label="a." permid="SbE">
                  <li permid="Amv">
                    <p permid="RNw">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="xUF">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="gtE">
                    <p permid="ebO">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="KiX">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="MAN">
                    <p permid="qqg">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="Wxp">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="sHW">
                    <p permid="CEy">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="iLH">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- 2 to 4 terms -->
      <exercise permid="hGb">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="UAY">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="AIh">
                <ol label="a." permid="yiN">
                  <li permid="YPf">
                    <p permid="OSQ">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="uZZ">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="EWo">
                    <p permid="bhi">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="Hor">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="ldx">
                    <p permid="nvA">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="TCJ">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="RkG">
                    <p permid="zJS">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="fRb">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="NNk">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="gPq">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="MWz">
                <ol label="a." permid="epW">
                  <li permid="xrP">
                    <p permid="LYk">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="sft">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="dyY">
                    <p permid="YmC">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="EtL">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="JGh">
                    <p permid="kAU">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="QId">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="pNq">
                    <p permid="wPm">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="cWv">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- with larger integer coefficients -->
      <exercise permid="tUt">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="tdI">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="ZkR">
                <ol label="a." permid="Kxf">
                  <li permid="VUz">
                    <p permid="JdE">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="pkN">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="CbI">
                    <p permid="VrW">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="Bzf">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="iiR">
                    <p permid="hGo">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="NNx">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="Oqa">
                    <p permid="tUG">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="abP">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="abC">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="Fsa">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="lzj">
                <ol label="a." permid="qEo">
                  <li permid="uxj">
                    <p permid="GiY">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="mqh">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="aEs">
                    <p permid="Sxq">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="yEz">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="GLB">
                    <p permid="eLI">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="KSR">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="mSK">
                    <p permid="raa">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="Xhj">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- decimal coefficients -->
      <exercise permid="GiL">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="RGs">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="xNB">
                <ol label="a." permid="WLx">
                  <li permid="SZT">
                    <p permid="Dos">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="jvB">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="zhc">
                    <p permid="PCK">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="vJT">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="fol">
                    <p permid="bRc">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="HYl">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="Lvu">
                    <p permid="ofu">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="UmD">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="mpU">
        <webwork>
            <setup>
<pg-code>
Context("Numeric");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'+'.
$expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'x+'.
$expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'y+'.
$expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'z+'.
$expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'s+'.
$expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'t+'.
$expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2x^2+'.
$expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2y^2+'.
$expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2z^2+'.
$expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2s^2+'.
$expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="dUK">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="KbT">
                <ol label="a." permid="CSG">
                  <li permid="rCD">
                    <p permid="AtM">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="gAV">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="XJM">
                    <p permid="MIe">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="sPn">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="DQV">
                    <p permid="YWw">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="FdF">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="jYe">
                    <p permid="lkO">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="RrX">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
<!-- fraction coefficients -->
      <exercise permid="Sxd">
        <webwork>
            <setup>
<pg-code>
Context("Fraction");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;flags-&gt;set(reduceConstants=&gt;0);
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula(Fraction($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'+'.
Fraction($expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'x+'.
Fraction($expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'y+'.
Fraction($expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'z+'.
Fraction($expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'s+'.
Fraction($expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'t+'.
Fraction($expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2x^2+'.
Fraction($expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2y^2+'.
Fraction($expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2z^2+'.
Fraction($expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2s^2+'.
Fraction($expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="qjc">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="Wql">
                <ol label="a." permid="iZP">
                  <li permid="Qfn">
                    <p permid="xzg">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="dGp">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="wmw">
                    <p permid="JNy">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="pUH">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="ctF">
                    <p permid="WbQ">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="CiZ">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="IAO">
                    <p permid="iqi">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="Oxr">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="yEm">
        <webwork>
            <setup>
<pg-code>
Context("Fraction");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;flags-&gt;set(reduceConstants=&gt;0);
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula(Fraction($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'+'.
Fraction($expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'x+'.
Fraction($expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'y+'.
Fraction($expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'z+'.
Fraction($expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'s+'.
Fraction($expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'t+'.
Fraction($expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2x^2+'.
Fraction($expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2y^2+'.
Fraction($expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2z^2+'.
Fraction($expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2s^2+'.
Fraction($expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="Cxu">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="iED">
                <ol label="a." permid="PgY">
                  <li permid="oHX">
                    <p permid="uEA">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="aLJ">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="UPg">
                    <p permid="GSS">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="nab">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="AWp">
                    <p permid="Thk">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="zot">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="hdy">
                    <p permid="fvC">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="LCL">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="eLv">
        <webwork>
            <setup>
<pg-code>
Context("Fraction");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;flags-&gt;set(reduceConstants=&gt;0);
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula(Fraction($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'+'.
Fraction($expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'x+'.
Fraction($expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'y+'.
Fraction($expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'z+'.
Fraction($expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'s+'.
Fraction($expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'t+'.
Fraction($expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2x^2+'.
Fraction($expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2y^2+'.
Fraction($expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2z^2+'.
Fraction($expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2s^2+'.
Fraction($expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="OLM">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="uSV">
                <ol label="a." permid="voh">
                  <li permid="NkH">
                    <p permid="rJU">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="XRd">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="trQ">
                    <p permid="DYm">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="kfv">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="ZyZ">
                    <p permid="QmE">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="wtN">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="FGi">
                    <p permid="cAW">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="IIf">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
      <exercise permid="KSE">
        <webwork>
            <setup>
<pg-code>
Context("Fraction");
Context()-&gt;noreduce('(-x)+y','(-x)-y');
Context()-&gt;flags-&gt;set(reduceConstants=&gt;0);
Context()-&gt;variables-&gt;are(x=&gt;'Real',y=&gt;'Real',z=&gt;'Real',t=&gt;'Real',s=&gt;'Real');
Context()-&gt;operators-&gt;set(
'+' =&gt; {class =&gt; 'bizarro::BOP::add', isCommand =&gt; 1},
'-' =&gt; {class =&gt; 'bizarro::BOP::subtract', isCommand =&gt; 1},
);
@termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
for $i (0..3) {
$expression[$i] = Formula("0");
my @vars;
my @exps;
for $j (1..$termcount[$i]) {
my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
my $nextexp;
do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
push(@vars,$nextvar);
push(@exps,$nextexp);
$string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
$expression[$i] = Compute("$expression[$i]+$string")-&gt;reduce-&gt;reduce;
}
}
$exp0=$expression[0];
$exp1=$expression[1];
$exp2=$expression[2];
$exp3=$expression[3];
for $i (0..3) {
$answers[$i] = Formula(Fraction($expression[$i]-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'+'.
Fraction($expression[$i]-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'x+'.
Fraction($expression[$i]-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'y+'.
Fraction($expression[$i]-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'z+'.
Fraction($expression[$i]-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'s+'.
Fraction($expression[$i]-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'t+'.
Fraction($expression[$i]-&gt;D('x')-&gt;D('x')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2x^2+'.
Fraction($expression[$i]-&gt;D('y')-&gt;D('y')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2y^2+'.
Fraction($expression[$i]-&gt;D('z')-&gt;D('z')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2z^2+'.
Fraction($expression[$i]-&gt;D('s')-&gt;D('t')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2s^2+'.
Fraction($expression[$i]-&gt;D('t')-&gt;D('s')-&gt;eval(x=&gt;0,y=&gt;0,z=&gt;0,t=&gt;0,s=&gt;0)).'/2t^2')-&gt;reduce-&gt;reduce;
$evaluator[$i] = $answers[$i] -&gt; cmp(
checker=&gt;sub{
my ( $correct, $student, $ansHash ) = @_;
return 0 if $ansHash-&gt;{isPreview} || $correct != $student;
$student = $ansHash-&gt;{student_formula};
$correct = $correct-&gt;{original_formula} if defined $correct-&gt;{original_formula};
$student = Formula("$student"); $correct = Formula("$correct");
return 0 unless ($correct == $student);
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;1,bizarroSub=&gt;1);
delete $correct-&gt;{test_values}, $student-&gt;{test_values};
my $OK = (($correct == $student) or ($student == $correct));
Context()-&gt;flags-&gt;set(bizarroAdd=&gt;0,bizarroSub=&gt;0);
Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
return $OK;
});
}
</pg-code>
            </setup>
            <statement>
              <p permid="bae">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="Hhn">
                <ol label="a." permid="bvq">
                  <li permid="lNr">
                    <p permid="oPo">
                      <m><var name="$exp0"/></m>
                    </p>
                    <p permid="UWx">
                      <var name="$evaluator[0]" width="25"/>
                    </p>
                  </li>
                  <li permid="RUA">
                    <p permid="BdG">
                      <m><var name="$exp1"/></m>
                    </p>
                    <p permid="hkP">
                      <var name="$evaluator[1]" width="25"/>
                    </p>
                  </li>
                  <li permid="ybJ">
                    <p permid="NrY">
                      <m><var name="$exp2"/></m>
                    </p>
                    <p permid="tzh">
                      <var name="$evaluator[2]" width="25"/>
                    </p>
                  </li>
                  <li permid="eiS">
                    <p permid="ZGq">
                      <m><var name="$exp3"/></m>
                    </p>
                    <p permid="FNz">
                      <var name="$evaluator[3]" width="25"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
    </exercisegroup>
  </exercises>
</section>
